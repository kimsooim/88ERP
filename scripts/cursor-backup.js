#!/usr/bin/env node

/**
 * Cursor Î©îÎ™®Î¶¨ Î∞±ÏóÖ Ïä§ÌÅ¨Î¶ΩÌä∏
 * MCP MemoryÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î•º Ï∂îÏ∂úÌïòÏó¨ GitÏóê Î∞±ÏóÖ
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

class CursorMemoryBackup {
    constructor() {
        this.backupDir = './backups/cursor-memory';
        this.logDir = './logs';
        this.logFile = path.join(this.logDir, 'cursor-backup.log');
        this.startTime = Date.now();
        
        // ÌïÑÏöîÌïú ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
        [this.backupDir, this.logDir].forEach(dir => {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
            }
        });
    }

    /**
     * Î°úÍ∑∏ Î©îÏãúÏßÄ Ï∂úÎ†•
     */
    log(level, message) {
        const timestamp = new Date().toISOString();
        const logMessage = `[${timestamp}] CURSOR-${level}: ${message}`;
        
        console.log(logMessage);
        
        try {
            fs.appendFileSync(this.logFile, logMessage + '\\n');
        } catch (error) {
            console.warn('Failed to write log:', error.message);
        }
    }

    /**
     * MCP Memory Graph Ï∂îÏ∂ú (ÏãúÎÆ¨Î†àÏù¥ÏÖò)
     * Ïã§Ï†úÎ°úÎäî MCP ÌîÑÎ°úÌÜ†ÏΩúÏùÑ ÌÜµÌï¥ Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏ÏôÄÏïº Ìï®
     */
    extractMemoryGraph() {
        this.log('INFO', 'Extracting Cursor MCP memory graph...');
        
        // Cursor MCP Î©îÎ™®Î¶¨ Îç∞Ïù¥ÌÑ∞ (Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî MCP ÌîÑÎ°úÌÜ†ÏΩú ÏÇ¨Ïö©)
        const memoryData = {
            timestamp: new Date().toISOString(),
            version: '1.0',
            source: 'Cursor MCP Memory',
            entities: [
                {
                    name: 'Ann',
                    entityType: 'ÏÇ¨Ïö©Ïûê',
                    observations: [
                        'Î∏åÎûúÎìú Ï∫êÎ¶≠ÌÑ∞ Í¥ÄÎ¶¨ Îã¥Îãπ',
                        'Windows ÌôòÍ≤ΩÏóêÏÑú ÏûëÏóÖ',
                        'NAS Ï†ÄÏû•ÏÜå ÏÇ¨Ïö© (ds920)',
                        'ÌïúÍ∏Ä ÌååÏùºÎ™ÖÏùÑ ÏòÅÎ¨∏ÏúºÎ°ú Î≥ÄÌôòÌïòÎäî rename.py ÌîÑÎ°úÍ∑∏Îû® ÏÇ¨Ïö©'
                    ]
                },
                {
                    name: '88OEMBoard',
                    entityType: 'ÌîÑÎ°úÏ†ùÌä∏',
                    observations: [
                        'ÏúÑÏπò: \\\\ds920\\\\web\\\\88oemboard',
                        'Notion Ïó∞Îèô Í∏∞Îä•',
                        'NAS Ïó∞Îèô Í∏∞Îä•',
                        'ÎåÄÏãúÎ≥¥Îìú Íµ¨ÌòÑ'
                    ]
                },
                {
                    name: '88ERP',
                    entityType: 'Project',
                    observations: [
                        'ÏúÑÏπò: \\\\ds920\\\\web\\\\88ERP',
                        'Notion Ïó∞Îèô Í∏∞Îä•',
                        'NAS Ïó∞Îèô Í∏∞Îä•',
                        'ÎåÄÏãúÎ≥¥Îìú Íµ¨ÌòÑ Í∏∞Îä•'
                    ]
                },
                {
                    name: 'Ïµ∏Î∞î(Choba)',
                    entityType: 'Brand',
                    observations: [
                        'Î≥ºÏ≤¥Ïù∏ ÌÜ†Ïù¥(Ball Chain Toy), ÌÇ§ÎßÅ Ï†úÌíàÍµ∞',
                        'Ï¥ù 22Í∞ú Ï∫êÎ¶≠ÌÑ∞',
                        'Í≥ÑÎûÄ, ÏÉàÏö∞, Ï∞∏Ïπò, Î¨∏Ïñ¥, Ïó∞Ïñ¥, Ïû•Ïñ¥, ÎÇ†Ïπò, Ïò§Ïù¥, Ïú†Î∂Ä, ÍΩÉÍ≤å, ÏÉÅÏñ¥, Î≥µÏñ¥, ÏÜåÏÑ∏ÏßÄ, ÌñÑ, ÎßàÏπ¥Î°±, Î∂ïÏñ¥Îπµ, ÌëúÍ≥†, ÏïÑÎ≥¥Ïπ¥ÎèÑ, ÍπªÏûé, ÏôÑÎëêÏΩ©, ÏôÄÏÇ¨ÎπÑÎùΩÍµê, Îã®Î¨¥ÏßÄÎùΩÍµê'
                    ]
                },
                {
                    name: 'ÏΩîÌäºÌë∏Îìú(Cottonfood)',
                    entityType: 'Brand',
                    observations: [
                        'ÏãúÎ¶¨Ï¶à: 01_mochi (28Í∞ú Ï∫êÎ¶≠ÌÑ∞), 02_cute, 03_general',
                        'Î≥ºÏ≤¥Ïù∏, ÌÇ§ÎßÅ Ï†úÌíàÍµ∞',
                        'ÏåÄÏïå, ÎßùÍ∞úÎñ°, ÏïÑÎ≥¥Ïπ¥ÎèÑ, Î≥µÏà≠ÏïÑ, ÏãùÎπµ, ÌñÑÎ≤ÑÍ±∞, ÌíãÍ≥†Ï∂î, ÌôçÍ≥†Ï∂î, Í∞ÄÏßÄ, ÎãπÍ∑º, Î∞îÎÇòÎÇò, ÏàòÎ∞ï, Í≥†Ï∂îÏû•Îñ°Î≥∂Ïù¥, ÏßúÏû•Îñ°Î≥∂Ïù¥, Í∑∏Î¶∞ÌÇ§ÏúÑ, Í≥®ÎìúÌÇ§ÏúÑ, ÏïåÎ∞§, Ïä§Î™®Ïñ¥Ïø†ÌÇ§, ÏãúÎ£®Îñ°, Í≥∂Í∞ê, Ïä§Ìä∏Î°±Î≤†Î¶¨, Ïò§ÏßïÏñ¥, Ïñ¥Î¨µ, Í≥†Íµ¨Îßà, Ï¥àÏΩîÏÉò, Ï∫îÎîîÎ∞î, Ï∞∏Ïô∏, Î©îÎ°†Îπµ'
                    ]
                },
                {
                    name: 'ÏΩîÌäºÏï†Îãà(Cottonani)',
                    entityType: 'Brand',
                    observations: [
                        'Ï£ºÏöî Ï∫êÎ¶≠ÌÑ∞: ÎùºÏù¥ÎèÖ(Liedog)',
                        'ÏÉâÏÉÅÎ≥Ñ: Î∏åÎùºÏö¥(Brown), ÌöåÏÉâ(Gray), ÎÑ§Ïù¥ÎπÑ(Navy)'
                    ]
                },
                {
                    name: 'MCP_Git_ÎèôÍ∏∞Ìôî_ÏãúÏä§ÌÖú',
                    entityType: 'ÏãúÏä§ÌÖú',
                    observations: [
                        'Git Ï†ÄÏû•ÏÜå: C:/abot/ann-memory-repo',
                        'Î°úÏª¨ Î©îÎ™®Î¶¨: mcp/cursor_helpers.py Î™®Îìà',
                        'ÏûêÎèô ÎèôÍ∏∞Ìôî: 10Î∂Ñ Í∞ÑÍ≤©',
                        'ÏßÄÏõê Í∏∞Îä•: Ï∫êÎ¶≠ÌÑ∞ Í≤ÄÏÉâ, Î©îÎ™®Î¶¨ ÌÜµÍ≥Ñ, Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞'
                    ]
                }
            ],
            relations: [
                { from: 'Ann', to: 'Ïµ∏Î∞î(Choba)', relationType: 'Ïö¥ÏòÅ' },
                { from: 'Ann', to: 'ÏΩîÌäºÌë∏Îìú(Cottonfood)', relationType: 'Ïö¥ÏòÅ' },
                { from: 'Ann', to: 'ÏΩîÌäºÏï†Îãà(Cottonani)', relationType: 'Ïö¥ÏòÅ' },
                { from: 'Ann', to: '88ERP', relationType: 'ÌîÑÎ°úÏ†ùÌä∏ ÏßÑÌñâ' },
                { from: 'Ann', to: 'MCP_Git_ÎèôÍ∏∞Ìôî_ÏãúÏä§ÌÖú', relationType: 'ÏÇ¨Ïö©' }
            ],
            metadata: {
                entityCount: 7,
                relationCount: 5,
                extractedBy: 'Cursor MCP',
                extractionMethod: 'MCP memory:read_graph',
                characterCount: {
                    Ïµ∏Î∞î: 22,
                    ÏΩîÌäºÌë∏Îìú: 28,
                    ÏΩîÌäºÏï†Îãà: 3
                },
                totalCharacters: 53,
                lastUpdated: new Date().toISOString()
            }
        };
        
        this.log('SUCCESS', `Extracted ${memoryData.entities.length} entities and ${memoryData.relations.length} relations`);
        return memoryData;
    }

    /**
     * Î∞±ÏóÖ ÌååÏùº Ï†ÄÏû•
     */
    saveBackup(memoryData) {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const filename = `cursor-memory-backup-${timestamp}.json`;
        const filepath = path.join(this.backupDir, filename);
        
        try {
            fs.writeFileSync(filepath, JSON.stringify(memoryData, null, 2));
            this.log('SUCCESS', `Backup saved: ${filename}`);
            return { success: true, filename, filepath };
        } catch (error) {
            this.log('ERROR', `Failed to save backup: ${error.message}`);
            return { success: false, error: error.message };
        }
    }

    /**
     * GitÏóê Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ï∂îÍ∞Ä Î∞è Ïª§Î∞ã
     */
    commitToGit(filename) {
        try {
            this.log('INFO', 'Adding changes to Git...');
            
            // Git add
            execSync('git add .', { cwd: process.cwd(), stdio: 'pipe' });
            
            // Git commit
            const commitMessage = `Cursor memory auto-backup - ${filename}`;
            execSync(`git commit -m "${commitMessage}"`, { 
                cwd: process.cwd(), 
                stdio: 'pipe' 
            });
            
            this.log('SUCCESS', 'Changes committed to Git');
            
            // Git push (ÏÑ†ÌÉùÏ†Å)
            try {
                execSync('git push origin main', { 
                    cwd: process.cwd(), 
                    stdio: 'pipe',
                    timeout: 30000 // 30Ï¥à ÌÉÄÏûÑÏïÑÏõÉ
                });
                this.log('SUCCESS', 'Changes pushed to remote repository');
                return { success: true, pushed: true };
            } catch (pushError) {
                this.log('WARN', `Push failed (will retry later): ${pushError.message}`);
                return { success: true, pushed: false };
            }
            
        } catch (error) {
            this.log('ERROR', `Git operation failed: ${error.message}`);
            return { success: false, error: error.message };
        }
    }

    /**
     * Ï†ÑÏ≤¥ Î∞±ÏóÖ ÌîÑÎ°úÏÑ∏Ïä§ Ïã§Ìñâ
     */
    async run() {
        try {
            this.log('INFO', 'üîÑ Starting Cursor memory backup...');
            
            // 1. Î©îÎ™®Î¶¨ Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
            const memoryData = this.extractMemoryGraph();
            
            // 2. Î∞±ÏóÖ ÌååÏùº Ï†ÄÏû•
            const saveResult = this.saveBackup(memoryData);
            if (!saveResult.success) {
                throw new Error(`Backup save failed: ${saveResult.error}`);
            }
            
            // 3. Git Ïª§Î∞ã
            const gitResult = this.commitToGit(saveResult.filename);
            
            // 4. Í≤∞Í≥º Î¶¨Ìè¨Ìä∏
            const duration = Date.now() - this.startTime;
            this.log('SUCCESS', `‚úÖ Cursor backup completed in ${Math.round(duration / 1000)}s`);
            this.log('INFO', `üìÅ File: ${saveResult.filename}`);
            this.log('INFO', `üìä Data: ${memoryData.entities.length} entities, ${memoryData.relations.length} relations`);
            this.log('INFO', `üé≠ Characters: ${memoryData.metadata.totalCharacters} total`);
            
            return {
                success: true,
                filename: saveResult.filename,
                memoryData,
                gitCommitted: gitResult.success,
                gitPushed: gitResult.pushed
            };
            
        } catch (error) {
            this.log('ERROR', `‚ùå Cursor backup failed: ${error.message}`);
            return { success: false, error: error.message };
        }
    }
}

// Ïã§Ìñâ
if (require.main === module) {
    const backup = new CursorMemoryBackup();
    
    backup.run().then(result => {
        if (result.success) {
            process.exit(0);
        } else {
            process.exit(1);
        }
    }).catch(error => {
        console.error('‚ùå Unexpected error:', error);
        process.exit(1);
    });
}

module.exports = CursorMemoryBackup;